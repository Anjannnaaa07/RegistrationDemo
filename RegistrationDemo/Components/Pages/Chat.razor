@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject RegistrationDemo.Services.IAuthState Auth
@rendermode InteractiveServer

@inject NavigationManager Nav

<h3>Chat Room</h3>

@if (!Auth.IsLoggedIn())
{
    <p>You must <a href="/login">log in</a> to chat.</p>
}
else
{
    <ul>
        @foreach (var msg in messages)
        {
            <li><strong>@msg.User:</strong> @msg.Text</li>
        }
    </ul>

    <input @bind-value="currentMessage"
           @bind-value:event="oninput" />

    <button type="button" @onclick="SendMessage">Send</button>
}

@code {
    private HubConnection? hubConnection;
    private string? currentMessage;
    private List<(string User, string Text)> messages = new();

    protected override async Task OnInitializedAsync()
    {
        if (!Auth.IsLoggedIn()) return;

        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{Nav.BaseUri}chathub")
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            messages.Add((user, message));
            StateHasChanged();
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("Connected to SignalR hub");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to connect to hub: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(currentMessage) && Auth.CurrentUser != null)
        {
            await hubConnection!.SendAsync("SendMessage", Auth.CurrentUser.Username, currentMessage);
            currentMessage = string.Empty;
        }
    }

}
